/*
defer
Атрибут defer сообщает браузеру,
что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме,
а затем запустить этот скрипт, когда он загрузится.

Вот пример с defer:

<p>...содержимое перед скриптом...</p>

<script defer src="https://javascript.info/article/script-async-defer/long.js?speed=1"></script>

<!-- отображается сразу же -->
<p>...содержимое после скрипта...</p>

Скрипты с defer никогда не блокируют страницу.
Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.
Атрибут defer будет проигнорирован, если в теге <script> нет src.


async
Атрибут async означает, что скрипт абсолютно независим:

Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.
Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
DOMContentLoaded может произойти как до асинхронного скрипта (если асинхронный скрипт завершит загрузку после того, как страница будет готова),
…так и после асинхронного скрипта (если он короткий или уже содержится в HTTP-кеше)
Остальные скрипты не ждут async, и скрипты casync не ждут другие скрипты.
Так что если у нас есть несколько скриптов с async, они могут выполняться в любом порядке.
То, что первое загрузится – запустится в первую очередь:
<p>...содержимое перед скриптами...</p>

<script>
  document.addEventListener('DOMContentLoaded', () => alert("DOM готов!"));
</script>

<script async src="https://javascript.info/article/script-async-defer/long.js"></script>
<script async src="https://javascript.info/article/script-async-defer/small.js"></script>

<p>...содержимое после скриптов...</p>

Содержимое страницы отображается сразу же : async его не блокирует.
DOMContentLoaded может произойти как до, так и после async, никаких гарантий нет.
Асинхронные скрипты не ждут друг друга. Меньший скрипт small.js идёт вторым,
но скорее всего загрузится раньше long.js, поэтому и запустится первым.
То есть, скрипты выполняются в порядке загрузки.

ИТОГО:
У async и defer есть кое-что общее: они не блокируют отрисовку страницы.
Так что пользователь может просмотреть содержимое страницы и ознакомиться с ней сразу же.

Но есть и значимые различия:

Порядок	DOMContentLoaded
async	Порядок загрузки (кто загрузится первым, тот и сработает).
Не имеет значения. Может загрузиться и выполниться до того, как страница полностью загрузится.
Такое случается, если скрипты маленькие или хранятся в кеше, а документ достаточно большой.
defer	Порядок документа (как расположены в документе).
Выполняется после того, как документ загружен и обработан (ждёт), непосредственно перед DOMContentLoaded.
Страница без скриптов должна быть рабочей

Пожалуйста, помните, что когда вы используете defer, страница видна до того, как скрипт загрузится.

Пользователь может знакомиться с содержимым страницы, читать её,
но графические компоненты пока отключены.

Поэтому обязательно должна быть индикация загрузки,
нерабочие кнопки – отключены с помощью CSS или другим образом.
Чтобы пользователь явно видел, что уже готово, а что пока нет.

На практике defer используется для скриптов,
которым требуется доступ ко всему DOM и/или важен их относительный порядок выполнения.

А async хорош для независимых скриптов, например счётчиков и рекламы,
относительный порядок выполнения которых не играет роли.

*/